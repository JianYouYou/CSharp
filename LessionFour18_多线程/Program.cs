using System.Threading;
using System.Collections.Generic;
namespace LessionFour18_多线程
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("多线程");
            #region 进程
            //打开一个应用程序就是一个进程
            //打开网易云是一个进程
            //打开b站是一个进程
            //进程相互独立 也可相互访问
            //比如玩博得之门3用steam邀请好友玩
            //打开任务管理器可以查看我们都开了什么进程
            #endregion

            #region 什么是线程
            //线程是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位
            //进程是工厂 线程是工厂的流水线 每条生产线可以独立工作，但共享工厂的资源
            //线程是进程的实际运作单位
            //我们编的程序就是线程
            //一个进程可以并发多个线程
            #endregion

            #region 语法
            //线程类 Thread
            //需要引用命名空间System.Threading;
            //新线程执行的代码需要封装到一个函数里
            //其实我们执行的主线程，不就是一个在Main函数里
            Thread t = new Thread(NewThreadLogic);

            //启动新线程 新线程名.Start();
            t.Start();
            
            //设置为后台线程
            //当前台线程都结束了后，整个程序都接受了，即使后台线程正在运行
            //后台线程不会防止应用程序的进程被终止掉
            //如果不设置为后台线程，会导致进程无法正常关闭
            t.IsBackground = true;
            //这样就设置为了后台线程

            //关闭释放一个线程
            //不是死循环的线程 不用可以去关闭
            //是死循环的线程有两种方法
            //1.使死循环的bool条件可改。声明一个静态bool类型变量，用作死循环条件·
            //2.用线程提供的方法 在.Netcore版本无法终止 会报错 现在这个控制太就是
            //t.Abort();    所以用第一种方法吧

            //线程休眠
            //填的是毫秒数，休眠多少毫秒 在哪个线程里执行 就休眠哪个线程 1s = 1000ms

            //线程之间共享数据
            //线程共享数据可能会出问题
            //所以通过加锁避免问题
            //lock可以加锁
            //当我们在多个线程当中 想要访问同样的东西进行逻辑处理时，为了避免不必要的逻辑顺序执行的错我
            //lock(引用类型对象){ }
            //两个地方用同一个锁
            //运行其中一个时 会查看 引用类型对象在另一个锁的的地方 锁完了吗（运行完了吗）
            //这样就能实现多个锁 只执行一个 当这个执行完了之后才执行别的
            //但是锁也会影响线程的效率


            Thread.Sleep(1000);
            #endregion


        }
        static void NewThreadLogic()
        {
            while (true)    //不设置成后台线程 即使主线程接受了这个线程也会一直执行
            {
                Console.WriteLine("新的线程");
            }
        }
    }
}
