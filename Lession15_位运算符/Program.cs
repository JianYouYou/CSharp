namespace Lesssion15_位运算符
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("位运算符");
            //位运算符 主要用数值类型进行计算
            //将数值转换成二进制 再进行位运算
            #region 位与 &
            //链接两个数值进行位计算 将数值转成二进制
            //对位运算 有0则0 把数值转化成二进制每位对应 少位用0补
            int a = 1;      //001
            int b = 5;      //101
            int c = a & b;
            //  001
            //& 101
            //  001 = 1；
            //就是这样 c = 1;
            //多个数值进行位运算 从左到右依次运算
            a = 1;      //001
            b = 5;      //101
            c = 19;     //10011
            int d = a & b & c;
            //    00001 
            //    00101
            //得到 00001
            //     10011
            //得到 00001
            //所以c=1;
            #endregion

            #region 位或 |
            //转换为二进制 对位运算 有1则1
            a = 1;  //001
            b = 5;  //101
            c = a | b;
            //      001
            //      101
            //得    101
            //所以c = 5;
            //连续运算与位与相同
            #endregion

            #region 异或 ^
            //对位运算 相同为0 不同为1
            a = 1;  //001
            b = 5;  //101
            c = a ^ b;
            //       001
            //       101
            //得     100
            //所以c = 4
            //连续运算与上相同
            #endregion

            #region 位取反 ~
            //对位运算 0变1 1变0 与逻辑运算符的逻辑非相似
            //取反不仅是简单把后几位的取反 而是要将类型能占的所有的字节都列出来取0
            //比如 b为int型 32位字节
            b = 5;  //101
            //   b = 0000 0000 0000 0000 0000 0000 0000 0101
            //则变为  1111 1111 1111 1111 1111 1111 1111 1010
            //设计反码补码相关的知识 这里b = -6
            #endregion

            #region 左移<< 右移>>
            //让一个二进制数进行左移或右移
            //左移几位 右侧加几个0
            a = 5;  //101
            c = a << 5;
            //变为10100000；
            //右移 则是右侧去掉几个零
            c  = c >> 3;
            //变为10100

            #endregion


            Console.WriteLine(
        }
    }
}
